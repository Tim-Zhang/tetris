// Generated by CoffeeScript 1.6.3
(function() {
  $(function() {
    var APP, BASE, CONFIG, allPieces, c, centerComponent, check, compiled, component, draw, drawBase, erase, genComponent, move, moveDown, moveLeft, moveRight, paintColor, r, setBase, transform, _i, _j, _ref, _ref1;
    CONFIG = {
      row: 21,
      col: 12
    };
    APP = {
      status: 0,
      score: 0,
      next: null,
      timer: null
    };
    component = null;
    allPieces = [
      [
        {
          x: 0,
          y: 0
        }, {
          x: 1,
          y: 0
        }, {
          x: 2,
          y: 0
        }, {
          x: 3,
          y: 0
        }
      ], [
        {
          x: 0,
          y: 0
        }, {
          x: 1,
          y: 0
        }, {
          x: 2,
          y: 0
        }, {
          x: 2,
          y: 1
        }
      ], [
        {
          x: 0,
          y: 0
        }, {
          x: 1,
          y: 0
        }, {
          x: 2,
          y: 0
        }, {
          x: 0,
          y: 1
        }
      ], [
        {
          x: 0,
          y: 0
        }, {
          x: 1,
          y: 0
        }, {
          x: 0,
          y: 1
        }, {
          x: 1,
          y: 1
        }
      ], [
        {
          x: 1,
          y: 0
        }, {
          x: 2,
          y: 0
        }, {
          x: 0,
          y: 1
        }, {
          x: 1,
          y: 1
        }
      ], [
        {
          x: 0,
          y: 0
        }, {
          x: 1,
          y: 0
        }, {
          x: 2,
          y: 0
        }, {
          x: 1,
          y: 1
        }
      ], [
        {
          x: 0,
          y: 0
        }, {
          x: 1,
          y: 0
        }, {
          x: 1,
          y: 1
        }, {
          x: 2,
          y: 1
        }
      ]
    ];
    centerComponent = function(component) {
      var center, length, maxX, newXstart;
      center = Math.floor(CONFIG.col / 2);
      maxX = _.max(component, function(c) {
        return c.x;
      }).x;
      length = maxX + 1;
      newXstart = center - Math.floor(length / 2);
      return _.map(component, function(c) {
        return {
          x: c.x + newXstart,
          y: c.y
        };
      });
    };
    genComponent = function() {
      var piece, random;
      random = _.random(0, 3);
      piece = allPieces[random];
      return centerComponent(piece);
    };
    paintColor = function(block, color) {
      var b, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = block.length; _i < _len; _i++) {
        b = block[_i];
        _results.push($("#coord-" + b.x + "-" + b.y).css({
          'background-color': color
        }));
      }
      return _results;
    };
    draw = function(component) {
      return paintColor(component, 'blue');
    };
    moveDown = function() {
      erase(component);
      move('down');
      return draw(component);
    };
    moveLeft = function() {
      erase(component);
      move('left');
      return draw(component);
    };
    moveRight = function() {
      erase(component);
      move('right');
      return draw(component);
    };
    move = function(direction) {
      var check_result, tmpComponent;
      tmpComponent = [];
      switch (direction) {
        case 'down':
          tmpComponent = _.map(component, function(c) {
            return {
              x: c.x,
              y: c.y + 1
            };
          });
          break;
        case 'left':
          tmpComponent = _.map(component, function(c) {
            return {
              x: c.x - 1,
              y: c.y
            };
          });
          break;
        case 'right':
          tmpComponent = _.map(component, function(c) {
            return {
              x: c.x + 1,
              y: c.y
            };
          });
      }
      check_result = check(tmpComponent);
      if (check_result) {
        return component = tmpComponent;
      } else if (direction === 'down') {
        setBase();
        return component = genComponent();
      }
    };
    setBase = function() {
      _.each(component, function(block) {
        return BASE[block.x][block.y] = 1;
      });
      return drawBase();
    };
    transform = function() {};
    check = function(tmpComponent) {
      return _.every(tmpComponent, function(block) {
        var not_over, _ref, _ref1;
        not_over = (0 <= (_ref = block.x) && _ref < CONFIG.col) && (0 <= (_ref1 = block.y) && _ref1 < CONFIG.row);
        return not_over && BASE[block.x][block.y] === 0;
      });
    };
    erase = function(component) {
      return paintColor(component, 'white');
    };
    drawBase = function() {
      var filled, x, y, yArray, _results;
      _results = [];
      for (x in BASE) {
        yArray = BASE[x];
        _results.push((function() {
          var _results1;
          _results1 = [];
          for (y in yArray) {
            filled = yArray[y];
            if (filled === 1) {
              _results1.push($("#coord-" + x + "-" + y).css({
                'background-color': 'blue'
              }));
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        })());
      }
      return _results;
    };
    compiled = _.template($('#template-board').html());
    $('#board').html(compiled(CONFIG));
    $(document).keydown(function(e) {
      if (APP.status === 0) {
        return;
      }
      switch (e.which) {
        case 37:
          return moveLeft();
        case 38:
          return transform();
        case 39:
          return moveRight();
        case 40:
          return moveDown();
      }
    });
    APP.status = 1;
    component = genComponent();
    BASE = [];
    for (c = _i = 0, _ref = CONFIG.col; 0 <= _ref ? _i < _ref : _i > _ref; c = 0 <= _ref ? ++_i : --_i) {
      for (r = _j = 0, _ref1 = CONFIG.row; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; r = 0 <= _ref1 ? ++_j : --_j) {
        if (BASE[c] == null) {
          BASE[c] = [];
        }
        BASE[c][r] = 0;
      }
    }
    draw(component);
    return APP.timer = setInterval((function() {
      return moveDown(component);
    }), 1000);
  });

}).call(this);

/*
//@ sourceMappingURL=tetris.map
*/
